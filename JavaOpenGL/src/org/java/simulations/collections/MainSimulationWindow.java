/*
 * MainSimulationWindow.java
 *
 * Created on 30. Juli 2008, 16:18
 */
package org.java.simulations.collections;

import com.sun.opengl.util.Animator;
import com.sun.opengl.util.GLUT;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputMethodEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.media.opengl.GL;
import javax.media.opengl.GLCanvas;
import javax.media.opengl.GLCapabilities;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.UIManager;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author cylab
 * @author mbien
 */
public class MainSimulationWindow extends JFrame {

    static {
        // When using a GLCanvas, we have to set the Popup-Menues to be HeavyWeight,
        // so they display properly on top of the GLCanvas
        JPopupMenu.setDefaultLightWeightPopupEnabled(false);
    }
    private static Hashtable hash;
    private static Animator animator;
    private static GLRenderer renderer;

    /** Creates new form MainFrame */
    public MainSimulationWindow() {
        initComponents();
        setTitle("Java collections simulation");

        hash = new Hashtable();
        animator = new Animator(canvas);
        renderer = new GLRenderer();
        canvas.addGLEventListener(renderer);
        // This is a workaround for the GLCanvas not adjusting its size, when the frame is resized.
        canvas.setMinimumSize(new Dimension());

      
  

        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                // Run this on another thread than the AWT event queueElement to
                // make sure the call to Animator.stop() completes before
                // exiting
                new Thread(new Runnable() {

                    public void run() {
                        animator.stop();
                        System.exit(0);
                    }
                }).start();
            }
        });
    }
    
   
    private void refreshTextArea() {
        textArea.setText(renderer.getCollection().toString());
    }
    
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new ButtonGroup();
        canvas = new GLCanvas(createGLCapabilites());
        jBtnAddElement = new JButton();
        jBtnRemoveElement = new JButton();
        panelSource = new JPanel();
        jScrollPane1 = new JScrollPane();
        textArea = new JTextArea();
        radioButtonQueue = new JRadioButton();
        radioButtonStack = new JRadioButton();
        jLabel1 = new JLabel();
        textFieldAddElement = new JTextField();
        buttonSave = new JButton();
        buttonLoad = new JButton();
        buttonClose = new JButton();
        buttonHash = new JRadioButton();
        textFieldKey = new JTextField();
        jLabel2 = new JLabel();
        buttonLoad.hide();
        buttonSave.hide();
        buttonHash.hide();
        textFieldKey.hide();
        jLabel2.hide();
        
        
                
        jBtnAddElement.setText("Add element");
        jBtnAddElement.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jBtnAddElementMouseClicked(evt);
            }
        });
        jBtnAddElement.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jBtnAddElementActionPerformed(evt);
            }
        });

        jBtnRemoveElement.setText("Remove element");
        jBtnRemoveElement.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jBtnRemoveElementMouseClicked(evt);
            }
        });
        jBtnRemoveElement.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jBtnRemoveElementActionPerformed(evt);
            }
        });

        panelSource.setBorder(BorderFactory.createTitledBorder("Source"));

        textArea.setColumns(5);
        textArea.setFont(new Font("Traditional Arabic", 0, 12));
        textArea.setRows(5);
        textArea.setEnabled(false);
        jScrollPane1.setViewportView(textArea);

        GroupLayout panelSourceLayout = new GroupLayout(panelSource);
        panelSource.setLayout(panelSourceLayout);
        panelSourceLayout.setHorizontalGroup(
            panelSourceLayout.createParallelGroup(Alignment.LEADING)
            .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
        );
        panelSourceLayout.setVerticalGroup(
            panelSourceLayout.createParallelGroup(Alignment.LEADING)
            .addComponent(jScrollPane1, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
        );

        buttonGroup.add(radioButtonQueue);
        radioButtonQueue.setText("Queue");
        radioButtonQueue.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                radioButtonQueueActionPerformed(evt);
            }
        });

        buttonGroup.add(radioButtonStack);
        radioButtonStack.setText("Stack");
        radioButtonStack.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                radioButtonStackActionPerformed(evt);
            }
        });

        jLabel1.setText("Element:");

        buttonSave.setText("Save");
        buttonSave.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        buttonLoad.setText("Load");
        buttonLoad.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                buttonLoadActionPerformed(evt);
            }
        });

        buttonClose.setText("Close");
        buttonClose.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                buttonCloseActionPerformed(evt);
            }
        });

        buttonGroup.add(buttonHash);
        buttonHash.setText("Hashtable");
        buttonHash.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                buttonHashActionPerformed(evt);
            }
        });

        jLabel2.setText("Key");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(canvas, GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addComponent(panelSource, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textFieldAddElement, GroupLayout.PREFERRED_SIZE, 108, GroupLayout.PREFERRED_SIZE))
                            .addComponent(jBtnRemoveElement, GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                            .addComponent(jBtnAddElement, GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(radioButtonQueue, GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(textFieldKey, GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(radioButtonStack)
                                .addGap(18, 18, 18)
                                .addComponent(buttonHash))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(buttonSave, GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
                    .addGroup(Alignment.LEADING, layout.createSequentialGroup()
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addComponent(buttonClose, GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                            .addComponent(buttonLoad, GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(canvas, GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelSource, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(radioButtonStack)
                            .addComponent(buttonHash))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(radioButtonQueue)
                            .addComponent(textFieldKey, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jBtnAddElement)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jBtnRemoveElement)
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(textFieldAddElement, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addComponent(buttonSave)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(buttonLoad)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(buttonClose)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnAddElementMouseClicked(MouseEvent evt) {//GEN-FIRST:event_jBtnAddElementMouseClicked

        if(buttonHash.isSelected()){
            hash.put(textFieldKey.getText().toString(), textFieldAddElement.getText().toString());
            textArea.append(hash.toString());
        }
        if (radioButtonQueue.isSelected() || radioButtonStack.isSelected()) {
                renderer.getCollection().addElement(textFieldAddElement.getText());
                  refreshTextArea();    
        } else if (!radioButtonQueue.isSelected() && !radioButtonStack.isSelected() && !buttonHash.isSelected()){
            JOptionPane.showMessageDialog(panelSource, "Choose option first!");
        }

    }//GEN-LAST:event_jBtnAddElementMouseClicked

    private void jBtnRemoveElementMouseClicked(MouseEvent evt) {//GEN-FIRST:event_jBtnRemoveElementMouseClicked
        if (radioButtonQueue.isSelected() || radioButtonStack.isSelected() || buttonHash.isSelected()) {
            renderer.getCollection().removeElement();
            refreshTextArea();
        } else {
            JOptionPane.showMessageDialog(panelSource, "Choose option first!");
        }
    }//GEN-LAST:event_jBtnRemoveElementMouseClicked

    private void buttonSaveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed

        Writer writer = null;
        JFileChooser fileChooser = new JFileChooser();
        String extension = "txt";
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("text file", extension));
        int result = fileChooser.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            String name = file.getName();
            if (!name.toLowerCase().endsWith("." + extension.toLowerCase())) {
                name += "." + extension;
                file = new File(file.getParent(), name);
                try {
                    writer = new BufferedWriter(new FileWriter(file));
                } catch (IOException ex) {
                    Logger.getLogger(MainSimulationWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    writer.write(textArea.getText());
                } catch (IOException ex) {
                    Logger.getLogger(MainSimulationWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    writer.close();
                } catch (IOException ex) {
                    Logger.getLogger(MainSimulationWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            System.out.println(file);
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void buttonLoadActionPerformed(ActionEvent evt) {//GEN-FIRST:event_buttonLoadActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        String extension = "txt";
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("text file", extension));
        int returnedValue = fileChooser.showOpenDialog(fileChooser);
        if (returnedValue == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                textArea.read(new FileReader(file.getAbsolutePath()), null);
            } catch (IOException ex) {
                System.out.println("problem accessing file" + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
}//GEN-LAST:event_buttonLoadActionPerformed

    private void radioButtonStackActionPerformed(ActionEvent evt) {//GEN-FIRST:event_radioButtonStackActionPerformed
        try {
            jBtnAddElement.setText("Push element");
            jBtnRemoveElement.setText("Pop element");
            renderer.addCollection(Utils.CollectionTypes.STACK);
            refreshTextArea();
        } catch (Exception ex) {
            Logger.getLogger(MainSimulationWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_radioButtonStackActionPerformed

    private void radioButtonQueueActionPerformed(ActionEvent evt) {//GEN-FIRST:event_radioButtonQueueActionPerformed
        try {
            jBtnAddElement.setText("Queue element");
            jBtnRemoveElement.setText("Deque element");
            renderer.addCollection(Utils.CollectionTypes.QUEUE);
            refreshTextArea();
        } catch (Exception ex) {
            Logger.getLogger(MainSimulationWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_radioButtonQueueActionPerformed

    private void buttonCloseActionPerformed(ActionEvent evt) {//GEN-FIRST:event_buttonCloseActionPerformed
        System.exit(0);
    }//GEN-LAST:event_buttonCloseActionPerformed

    private void buttonHashActionPerformed(ActionEvent evt) {//GEN-FIRST:event_buttonHashActionPerformed
        try {
            jBtnAddElement.setText("Add element to hash");
            jBtnRemoveElement.setText("Remove hash element");
            renderer.addCollection(Utils.CollectionTypes.STACK);
            refreshTextArea();
        } catch (Exception ex) {
            Logger.getLogger(MainSimulationWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonHashActionPerformed

    private void jBtnAddElementActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jBtnAddElementActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtnAddElementActionPerformed

    private void jBtnRemoveElementActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jBtnRemoveElementActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtnRemoveElementActionPerformed

    /**
     * Called from within initComponents().
     * hint: to customize the generated code choose 'Customize Code' in the contextmenu
     * of the selected UI Component you wish to cutomize in design mode.
     * @return Returns customized GLCapabilities.
     */
    private GLCapabilities createGLCapabilites() {

        GLCapabilities capabilities = new GLCapabilities();
        capabilities.setHardwareAccelerated(true);

        // try to enable 2x anti aliasing - should be supported on most hardware
        capabilities.setNumSamples(2);
        capabilities.setSampleBuffers(true);

        return capabilities;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Run this in the AWT event thread to prevent deadlocks and race conditions
        EventQueue.invokeLater(new Runnable() {

            public void run() {

                // switch to system l&f for native font rendering etc.
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (Exception ex) {
                    Logger.getLogger(getClass().getName()).log(Level.INFO, "can not enable system look and feel", ex);
                }

                MainSimulationWindow frame = new MainSimulationWindow();
                frame.setBackground(Color.BLUE);
                frame.setVisible(true);
            }
        });

        EventQueue.invokeLater((new Runnable() {

            public void run() {
                animator.start();
            }
        }));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton buttonClose;
    private ButtonGroup buttonGroup;
    private JRadioButton buttonHash;
    private JButton buttonLoad;
    private JButton buttonSave;
    private GLCanvas canvas;
    private JButton jBtnAddElement;
    private JButton jBtnRemoveElement;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JScrollPane jScrollPane1;
    private JPanel panelSource;
    private JRadioButton radioButtonQueue;
    private JRadioButton radioButtonStack;
    private JTextArea textArea;
    private JTextField textFieldAddElement;
    private JTextField textFieldKey;
    // End of variables declaration//GEN-END:variables
}
